// Code generated by go-enum
// DO NOT EDIT!

package lib

import (
	"fmt"
	"strings"
)

const (
	// EventTypeEnumCloudwatchLog is a EventTypeEnum of type Cloudwatch-Log.
	EventTypeEnumCloudwatchLog EventTypeEnum = iota
)

const _EventTypeEnumName = "cloudwatch-log"

var _EventTypeEnumNames = []string{
	_EventTypeEnumName[0:14],
}

// EventTypeEnumNames returns a list of possible string values of EventTypeEnum.
func EventTypeEnumNames() []string {
	tmp := make([]string, len(_EventTypeEnumNames))
	copy(tmp, _EventTypeEnumNames)
	return tmp
}

var _EventTypeEnumMap = map[EventTypeEnum]string{
	0: _EventTypeEnumName[0:14],
}

// String implements the Stringer interface.
func (x EventTypeEnum) String() string {
	if str, ok := _EventTypeEnumMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventTypeEnum(%d)", x)
}

var _EventTypeEnumValue = map[string]EventTypeEnum{
	_EventTypeEnumName[0:14]: 0,
}

// ParseEventTypeEnum attempts to convert a string to a EventTypeEnum
func ParseEventTypeEnum(name string) (EventTypeEnum, error) {
	if x, ok := _EventTypeEnumValue[name]; ok {
		return x, nil
	}
	return EventTypeEnum(0), fmt.Errorf("%s is not a valid EventTypeEnum, try [%s]", name, strings.Join(_EventTypeEnumNames, ", "))
}
